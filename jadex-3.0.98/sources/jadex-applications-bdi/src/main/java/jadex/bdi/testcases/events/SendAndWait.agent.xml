<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Test the send-message-and-wait functionality.</H3>
	
	Sends a message to itself and waits for an answer
	sent by an another plan.
-->
<agent xmlns="http://www.activecomponents.org/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.activecomponents.org/jadex-bdi
	                    http://www.activecomponents.org/jadex-bdi-${jadex_build_version}.xsd"
	name="SendAndWait"
	package="jadex.bdi.testcases.events">

	<imports>
		<import>java.util.logging.*</import>
		<import>jadex.bridge.fipa.SFipa</import>
		<import>jadex.bdi.testcases.AnswerPlan</import>
	</imports>

	<capabilities>
		<capability name="testcap" file="jadex.bdi.planlib.test.Test"/>
	</capabilities>
 
	<beliefs>
		<beliefref name="timeout" exported="true">
			<concrete ref="testcap.timeout"/>
		</beliefref>
		<beliefref name="testresults" result="true">
			<concrete ref="testcap.testresults"/>
		</beliefref>
	</beliefs>
 
	<plans>
		<plan name="test">
			<body class="SendAndWaitPlan"/>
		</plan>
		<!-- This plan sends one answer -->
		<plan name="answer">
			<body class="AnswerPlan"/>
			<trigger>
				<messageevent ref="rp_initiate"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- This message is sent to itself, and therefore also received. -->
		<messageevent name="rp_initiate" type="fipa" direction="send_receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<!-- Initialized with unique random value. -->
			<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>
		</messageevent>

		<!-- This message is sent to itself, and therefore also received. -->
		<messageevent name="inform" type="fipa" direction="send_receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

	<properties>
        <property name="debugging">false</property>
        <!-- <property name="logging.level">Level.INFO</property> -->
    </properties>

	<configurations>
		<configuration name="default">
			<plans>
				<initialplan ref="test"/>
			</plans>
		</configuration>
	</configurations>
</agent>

