<!--
	<H3>Library component that exposes the library service</H3>
-->
<componenttype xmlns="http://www.activecomponents.org/jadex-component"
	xmlns:env="http://www.activecomponents.org/jadex-envspace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.activecomponents.org/jadex-component 
	                    http://www.activecomponents.org/jadex-component-${jadex_build_version}.xsd"
	name="Library" package="jadex.platform.service.library">
	
	<arguments>
		<argument name="libpath" class="String"/>
		<argument name="baseclassloader" class="ClassLoader"/>
		<argument name="maven_dependencies" class="boolean"/>
	</arguments>
	
	<services>
	    <providedservice class="jadex.bridge.service.types.library.ILibraryService">
	        <implementation>
	        	jadex.commons.SReflect.isAndroid() ? jadex.platform.service.library.AndroidLibraryService.class.newInstance() : $args.libpath==null? new jadex.platform.service.library.LibraryService(): new jadex.platform.service.library.LibraryService(new java.net.URLClassLoader(jadex.commons.SUtil.toURLs($args.libpath), $args.baseclassloader==null ? jadex.platform.service.library.LibraryService.class.getClassLoader() : $args.baseclassloader))
	        </implementation>
	    </providedservice>
	    <providedservice class="jadex.bridge.service.types.library.IDependencyService">
	        <implementation>
				jadex.commons.SReflect.isAndroid() ? null : $args.maven_dependencies ? jadex.platform.service.dependency.maven.MavenDependencyResolverService.class.newInstance(): new jadex.platform.service.library.BasicDependencyService()
	        </implementation>
	    </providedservice>
	</services>
	
	<properties>
		<property name="system" class="boolean">true</property>
	</properties>
</componenttype>

