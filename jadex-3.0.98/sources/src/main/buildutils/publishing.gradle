apply plugin: 'maven-publish'

apply plugin: 'signing'

// needs to be applied after android and java plugins:
apply plugin: 'com.jfrog.bintray' // publish to bintray

project.rootProject.plugins.apply('io.codearte.nexus-staging') // auto-close nexus-oss staging

project.rootProject.afterEvaluate {
    nexusStaging {
        packageGroup = "org.activecomponents" //optional if packageGroup == project.getGroup()
        stagingProfileId = "5bcba2b9075ec8" //when not defined will be got from server using "packageGroup"
        username = getVar('centraluser', project)
        password = getVar('centralpassword', project)
    }
}

class PomConfig {
    static def common = {
        scm {
            url 'http://jadex.svn.sourceforge.net/viewvc/jadex/'
        }

        url 'https://www.activecomponents.org'

        // beware: organization needs '=' assignment:
        // https://issues.gradle.org/browse/GRADLE-2719
        developers {
            developer {
                id 'alex'
                name 'Alexander Pokahr'
                email 'pokahr@gmx.net'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/84'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'lars'
                name 'Lars Braubach'
                email 'braubach@gmx.net'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/80'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'kai'
                name 'Kai Jander'
                email 'kai.jander@googlemail.com'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/974'
                //                organization 'University of Hamburg'
                //                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
                organization 'Actoron GmbH'
                organizationUrl 'https://actoron.com/'
            }
            developer {
                id 'julian'
                name 'Julian Kalinowski'
                email 'kalinowski@informatik.uni-hamburg.de'
                //                url 'http://vsis-www.informatik.uni-hamburg.de/members/info.php/974'
                //                organization 'Actoron GmbH'
                //                organizationUrl 'https://actoron.com/'
                organization 'University of Hamburg'
                organizationUrl 'http://vsis-www.informatik.uni-hamburg.de/'
            }
        }

    }

    static def gpl = {
        licenses {
            license {
                name 'GPL-3.0'
                url 'https://gnu.org/licenses/gpl-3.0'
                distribution 'repo'
            }
        }
    }

    static def commercial = {
        licenses {
            license {
                name 'Actoron GmbH Commercial Licence'
            }
        }
    }
}

// -------------------------------------
// ------------ PUBLISH ----------------
// -------------------------------------

def canPublishToNexus = isCommercial(project) && repo_commercial || !isCommercial(project) && repo_noncommercial

if (project.hasProperty('signing.secretKeyRingFile')) {
    signing {
        sign configurations.archives
// uncomment with gradle 4.8
// signing poms with maven-publish is supported with gradle 4.8, however, 4.8 seems to be incompatible with bintray 1.8 :/
//            sign publishing.publications.MyPublication
    }


    // remove once on gradle 4.8:
    // generate pom so it can be signed with gradle < 4.8
    // see https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b
    model {
        tasks.generatePomFileForMyPublicationPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMyPublicationPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        if (canPublishToNexus) {
            tasks.publishMyPublicationPublicationToMavenRepository {
                dependsOn project.tasks.signArchives
            }
        }
        tasks.bintrayUpload {
            dependsOn project.tasks.signArchives
        }
    }

    // remove once on gradle 4.8:
    project.tasks.signArchives.signatureFiles.each {
        if (it instanceof Artifact) {
            artifact(it) {
                def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                if (matcher.find()) {
                    classifier = matcher.group(1)
                } else {
                    classifier = null
                }
                extension = 'jar.asc'
            }
        }
    }
}

publishing {
    if (project.hasProperty('repouser')) {
        if (canPublishToNexus) {
            repositories {
                def repo

                if (isCommercial(project) && repo_commercial) {
                    repo = repo_commercial
                } else if (!isCommercial(project) && repo_noncommercial) {
                    repo = repo_noncommercial
                }
                maven {
                    url repo
                    credentials {
                        username repouser
                        password repopassword
                    }
                }
            }
        }
    }

    publications {
        MyPublication(MavenPublication) {
            if (isWebApplicationProject(project)) {
                from components.web
            } else if (!isAndroidProject(project)) {
                from components.java
            }

            // somehow artifacts are lost when publishing with maven-publish, re-add all jars:
            project.tasks.withType(Jar) {
                def matcher = (it.name =~ /.*(javadoc|sources).*/)
                if (matcher.matches()) {
//                println "adding artifact: $it , classifier: ${matcher[0][1]}"
                    artifact(it) {
                        classifier matcher[0][1]
                    }
                }
            }

            groupId group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                if (isAndroidProject(project)) {
                    root.get('packaging').get(0).setValue('aar')
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.compile.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
                root.children().last() + PomConfig.common
                root.children().last() + PomConfig.gpl

                // remove once on gradle 4.8:
                // signing workaround for gradle 4.7:
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }

                // workaround for compile-time scope in POMs: (remove with gradle 4.7 or something)
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each { it.scope*.value = 'compile'}
            }
        }
    }
}

if (!isCommercial(project)) {
    bintray {
        user = getVar('BINTRAY_USER', project)
        key = getVar('BINTRAY_KEY', project)
        configurations = ['archives']
        publish = true
        publications = ['MyPublication']
        pkg {
            repo = 'jadex'
            name = 'jadex'
            licenses = ['GPL-3.0']
            vcsUrl = 'http://jadex.svn.sourceforge.net/viewvc/jadex/'
            websiteUrl = 'https://www.activecomponents.org'
            desc = 'Jadex Active Components Platform'
            version {
                name = jadex_build_version
                released = new Date()
                vcsTag = jadex_build_version
                if (getVar('centraluser', project) != null) {
                    mavenCentralSync {
                        sync = false //[Default: true] Determines whether to sync the version to Maven Central.
                        user = getVar('centraluser', project) //OSS user token: mandatory
                        password = getVar('centralpassword', project) //OSS user password: mandatory
                        close = '1'
                        //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                    }
                }
            }
        }
    }
}