apply from: "$rootDir/src/main/buildutils/util.gradle"

def artifactselectionmarker = 'X'
def buildconfigsfile = 'src/main/buildutils/buildconfigs.csv'
def depconfigfile = 'src/main/buildutils/dependencies.conf'
//gradle.ext.publishdists='minimal,standard,pro,android,addon3d,addonws,addonsecure,addonmaven,addonmgmt,editorbpmn,editorgpmn,relaystandalone'
gradle.ext.publishdists='minimal,standard,pro,android,addongradleplugin,addon3d,addonws,addonsecure,addonmaven,addonmgmt,editorbpmn,relaystandalone' // no editorgpmn until kernel not available

gradle.rootProject {
	def secpropfile = new File(settingsDir.getCanonicalPath() + File.separator + 'secret.properties')
	if (secpropfile.exists()) {
		def is = new FileInputStream(secpropfile)
		def secprops = new Properties();
		secprops.load(is)
		is.close()
		secprops.entrySet().each { entry ->
			gradle.rootProject.ext[entry.getKey()] = entry.getValue()
		}
		// convert path to sign key to absolute, so subprojects can find it:
		gradle.rootProject.ext['signing.secretKeyRingFile'] = file(gradle.rootProject.ext['signing.secretKeyRingFile'])
	}
}

/* Read the buildconfigs.csv and generate data structures */
BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(settingsDir.getCanonicalPath() + File.separator + buildconfigsfile)))
def disttargets = new ArrayList<String>()
def allbuildartifacts = new HashSet<String>()
//def builddeps = new HashSet<String>()
gradle.ext.distartmap = new HashMap<String, Set<String>>();
boolean firstline = true
br.eachLine { line ->
	if (firstline)
	{
		line.split(',').each { tok ->
			if (tok.trim().length() > 0)
			{
				disttargets.add(tok)
				gradle.ext.distartmap.put(tok, new HashSet<String>())
			}
		}
		firstline = false;
	}
	else
	{
		String[] toks = line.split(',');
		// Only include artifacts available on disk (e.g. for building a downloaded minimal dist, etc.)
		if(new File(settingsDir.getCanonicalPath() + File.separator + toks[0].replace((char)':', File.separatorChar)).exists())
		{
			if (JavaVersion.current() >= JavaVersion.VERSION_1_8 || !toks[0].endsWith('-java8'))
			{
				if (androidSdkExists() || !toks[0].contains('android'))
				{
					allbuildartifacts.add(':' + toks[0])
					for (int i = 1; i < toks.length; ++i)
					{
						if (artifactselectionmarker.equals(toks[i].trim().toUpperCase()))
						{
							Set<String> arts = gradle.ext.distartmap.get(disttargets.get(i - 1))
							arts.add(':' + toks[0]);
						}
					}
				}
			}
		}
	}
}
br.close()
disttargets = null

/* Determine selected distributions */
gradle.ext.selecteddists = new ArrayList<String>()
String selectedstr = gradle.startParameter.getProjectProperties().get('dist')
selectedstr = selectedstr != null? selectedstr : 'everything'
selectedstr = gradle.ext.properties.containsKey(selectedstr)? gradle.ext.properties.get(selectedstr) : selectedstr 

selectedstr.split(',').each {
	gradle.ext.selecteddists.add(it.trim())
}
System.out.println('Selected distributions: ' + gradle.ext.selecteddists.toString())
gradle.ext.maindistartifacts = new HashSet()
gradle.ext.selecteddists.each {
	gradle.ext.maindistartifacts.addAll(gradle.ext.distartmap.get(it))
}

gradle.ext.includeartifacts = new HashSet<String>()

def projdeps = new HashMap<String, Set<String>>()
def subproj = ''
if ((new File(settingsDir.getAbsolutePath() + File.separator + depconfigfile)).exists())
{
	def depconfreader = new BufferedReader(new InputStreamReader(new FileInputStream(settingsDir.getAbsolutePath() + File.separator + depconfigfile)))
	depconfreader.eachLine { line ->
		if (line.startsWith('### '))
			subproj = line.substring(4)
		else
		{
			def deps = projdeps.get(subproj)
			if (deps == null)
			{
				deps = new HashSet<String>()
				projdeps.put(subproj, deps)
			}
			deps.add(line)	
		}
	}
	depconfreader.close()
}

/*gradle.ext.maindistartifacts.each { mainart ->
	addDependency(mainart, projdeps, gradle.ext.includeartifacts)
}*/

// Add Dependencies for Addons
gradle.ext.selecteddists.each { seldist ->
	if (seldist.startsWith('addon')) {
		gradle.ext.distartmap.get(seldist).each { art ->
			addDependency(art, projdeps, gradle.ext.includeartifacts)
		}
	}
}

// Add Dependencies for Apps
gradle.ext.maindistartifacts.each { art ->
	// Subprojects unavailable during initialization, manually loading properties.
	def propfilepath = settingsDir.getCanonicalPath() + art.replace(':','/') + '/gradle.properties'
	def propfile = new File(propfilepath)
	if (propfile.exists()) {
		def prop = new java.util.Properties()
  		def propin = new FileInputStream(propfile)
  		prop.load(propin)
  		propin.close()
  		if (prop.getProperty('distasapp') != null && prop.getProperty('distasapp').toLowerCase().equals('true'))
  		{
  			addDependency(art, projdeps, gradle.ext.includeartifacts)
  		}
	}
}
gradle.ext.includeartifacts.addAll(gradle.ext.maindistartifacts)

include gradle.ext.includeartifacts.toArray(new String[gradle.ext.includeartifacts.size()])

def addDependency(artifact, projdeps, includeartifacts)
{
	if (!includeartifacts.contains(artifact))
	{
		includeartifacts.add(artifact)
		projdeps.get(artifact).each { artdep ->
			addDependency(artdep, projdeps, includeartifacts)
		}
	}
}
